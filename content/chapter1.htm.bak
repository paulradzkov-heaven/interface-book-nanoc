--- 
title: '1. Предпосылки'
---

<section>
	<h1>1. Предпосылки</h1>
	
	<div class="epigraph">
		<blockquote>
			<p>Нет ничего более невозможного, чем
			написать книгу, которая бы получила одобрение
			каждого читателя.</p>
		</blockquote>
		<cite>Мигель де	Сервантес</cite>
	</div>
	<p>
	В этой главе говорится о распространенном
	непонимании сущности таких систем, как интерфейсы,
	а также методов их разработки. Интерфейс&nbsp;&mdash; это
	нечто большее, чем окна, пиктограммы, выпадающие
	меню и мышь. Необходимость проектирования
	интерфейса уже на ранних стадиях разработки
	продукта иногда упускается из виду. Другой фактор,
	который часто недооценивается, состоит в том, что
	все мы наделены познавательными аппаратами,
	имеющими между собой много общего. При разработке
	интерфейсов следует сперва учесть общие факторы, а
	потом уже рассматривать индивидуальные различия.
	Но, к сожалению, существующие на сегодня средства
	конструирования интерфейсов не позволяют подойти к
	задаче именно таким образом.</p>
	
	<p>
	Я не согласен с мнением, что пользоваться
	компьютерами сложно потому, что с их помощью мы
	пытаемся делать безнадежно сложные вещи. В
	действительности независимо от того, насколько
	сложной является задача, выполняемая тем или иным
	продуктом, составные части этой задачи все равно
	должны оставаться простыми. Эта глава
	заканчивается определением
	человекоориентированного интерфейса.</p>
</section>

<section>
	<h2>1.1. Определение интерфейса</h2>
	
	<div class="epigraph">
		<p>Позвоните по вышеуказанному номеру
		и испытайте невероятное разочарование от нашей
		системы голосовой почты.</p>
		<cite>Надпись под рекламным
		объявлением одной из марок обуви</cite>
	</div>
	
	<p>
	В этой книге выражения <i>интерфейс
	&laquo;человек-машина&raquo;</i> или <i>интерфейс
	&laquo;человек-компьютер&raquo;</i> я обычно буду сокращать
	до <i>пользовательского интерфейса</i> или просто
	<i>интерфейса</i>. Многие считают, что термин
	<i>пользовательский интерфейс</i> относится только
	к современным графическим пользовательским
	интерфейсам (graphical user interface, GUI),
	основанным на окнах и меню, управляемых с помощью
	мыши. Например, в одной из статей в журнале
	&laquo;Mobile Office&raquo; было сказано: &laquo;Уже недалеко то
	время, когда вам совсем не нужно будет
	задумываться об интерфейсе, вы будете просто
	разговаривать со своим компьютером&raquo;. В ответ на
	это я мог бы заметить, что системы, управляемые
	голосом, действительно могут обходиться без окон,
	но телефонные автоответчики их также не имеют, и,
	тем не менее, их интерфейсы зачастую оказываются
	чрезвычайно плохими. Итак, способ, которым вы
	выполняете какую-либо задачу с помощью какого-либо
	продукта, а именно совершаемые вами действия и то,
	что вы получаете в ответ, и является интерфейсом.
	(См. также Raskin, 1993.)</p>
</section>

<section>
	<h2>1.2. Простое должно оставаться простым</h2>
	
	<div class="epigraph">
		<blockquote>
			<p>Технология&nbsp;&mdash; странная вещь. Одной
			рукой она дает вам великие дары, а другой&nbsp;&mdash;
			наносит удар в спину.</p>
		</blockquote>
		<cite>С. П. Сноу (цитата из Jarman, 1992)</cite>
	</div>
	
	<p>
	Несмотря на рост количества специалистов по
	разработке интерфейсов, мало кто из потребителей
	заявляет, что новые продукты, например электронные
	четырехкнопочные наручные часы, стали проще в
	использовании, чем несколько десятилетий назад.
	Если вы скажете, что наручные часы, так же как и
	компьютеры, сегодня имеют намного большую
	функциональность (с чем можно согласиться) и что,
	следовательно, интерфейсы этих устройств должны
	стать более сложными (что сомнительно), то я
	позволю себе заметить, что эта сложность
	неоправданно возникает в отношении даже тех задач,
	которые раньше удавалось выполнять без усилий.
	Сложные задачи могут требовать сложных
	интерфейсов, но это не оправдывает усложнения
	простых задач. Сравните, например, насколько
	труднее установить время на электронных наручных
	часах с четырьмя кнопками, чем выполнить <i>то же
	самое</i> действие на механической модели часов.
	Простые задачи должны оставаться простыми
	независимо от уровня сложности всей системы.</p>
	
	<p>
	Из всех нелепостей, создаваемых абсурдными
	конструкциями интерфейсов, именно усложнение
	простого чаще всего оказывается поводом для
	высмеивания в комиксах или комедийных сценах.
	Например,
	в фильме<a name="p21"></a> 
	&laquo;Городские жулики&raquo; (City Slickers) три
	товарища гонят стадо коров. Один из героев, его
	играет Билли Кристал (Billy Crystal), безуспешно
	пытается, видимо, уже не один час, объяснить
	друзьям, как с помощью видеомагнитофона записать
	какую-нибудь программу на одном канале во время
	просмотра другого. Когда, в конце концов, друзья
	выходят из себя от длинного и непонятного
	объяснения, персонаж Кристала с радостью
	соглашается сменить тему и предлагает вместо этого
	рассказать, как устанавливать время на часах в том
	же видеомагнитофоне. Это предложение приводит
	друзей в ярость, что вызывает смех у зрителя.
	Комический эффект порождается несоответствием
	между очевидной простотой задачи и сложностью
	интерфейса. Если бы лицевая панель
	видеомагнитофона была снабжена специальными
	кнопками, расположенными над и под цифрами часов,
	как это показано на рис.&nbsp;1.1, тогда мало у кого
	возникали бы трудности при установке времени.</p>
	
	<figure class="image">
		<img src="img_1-1.jpg" alt="электронные часы для видеомагнитофона"/>
		<figcaption><b>Рис.&nbsp;1.1.</b>
		Легко настраиваемые электронные часы для
		видеомагнитофона. Еще лучшим вариантом были бы
		часы, в которых время автоматически
		устанавливается по сигналам точного времени,
		передаваемым по радио</figcaption>
	</figure>
</section>

<h2>1.3. Ориентация на человека и на
пользователя</h2></p>

<div class="epigraph"><blockquote>
<p>Мы слишком усложнили программное
обеспечение и забыли главную цель.</p>
<cite>Джим и
Сандра Сандфорс</cite></blockquote></div>

<p>
Не только разработчики интерфейсов, но и
руководители предприятий электронной и
компьютерной промышленности понимают необходимость
ориентации разработок на нужды пользователей и
покупателей. И первым шагом в этом направлении
является стремление узнать своего пользователя,
что на практике обычно означает обращение за
помощью<a name="p22"></a>
к специалистам в той или иной области.
Специалисты действительно могут хорошо разбираться
в особенностях и деталях решаемой проблемы, но их
экспертные знания, как правило, не касаются
вопросов человеческой психологии. Хотя у
пользователей могут быть разные потребности в
зависимости от конкретной задачи, тем не менее, в
целом они проявляют много общих ментальных
характеристик. Прежде чем приступать к разработке
самой программы или пытаться учесть различия между
отдельными пользователями, разработчики интерфейса
могут облегчить свой труд, сосредоточив внимание
на том, что является общим для всех людей с точки
зрения требований к интерфейсу. По завершении этой
стадии разработчики интерфейса уже могут
приступить к согласованию различий между
отдельными пользователями и группами пользователей
и, в конечном итоге, к поиску оптимального
варианта, удовлетворяющего широкому диапазону
требований пользовательских задач. Однако этот
первый важный шаг, во время которого проект
интерфейса приводится в соответствие с общими
законами психологии, в процессе разработки обычно
пропускается. Разработчики интерфейсов
предпочитают не задумываться об этом и больше
полагаются на так называемые &laquo;промышленные
стандарты&raquo;. В результате все широко используемые
сегодня модели интерфейсов построены без учета
закономерностей мышления и поведения человека.
Например, почти во всех компьютерных системах
файлы должны иметь собственные имена. Между тем
часто возникают ситуации, когда нам трудно
вспомнить, под каким именем мы сохранили&nbsp;&mdash; файл
полгода назад. (Одно из возможных решений этой
проблемы обсуждается в разделе 5.3.) Таким
образом, мы хотим, чтобы программное обеспечение
было простым и понятным, своим безупречным
поведением показывая нам, что его создатели больше
работали над удобством использования, нежели над
привлекательным внешним видом своего продукта.</p>

<h2>1.4. Инструменты, которые препятствуют новым
идеям</h2></p>

<p>
Создание хороших интерфейсов требует большой и
напряженной работы. Считается, что такие известные
на рынке инструменты для построения интерфейсов,
как Visual Basic и Visual C++, позволяют снизить
стоимость разработки и ускорить ее внедрение.
Несмотря на все свои полезные свойства, эти
инструменты нечасто будут упоминаться в этой
книге. Причина состоит в том, что они основаны на
традиционных парадигмах и, следовательно, слишком
ограничивают ваши возможности. Аналогичным образом
принципы создания интерфейсов в таких системах,
как Macintosh или Windows, а также часть подходов,
предлагаемых в различных книжных изданиях,
посвященных разработке интерфейсов, иногда
оказываются явно ошибочными&nbsp;&mdash; зачастую из-за
корпоративной необходимости поддерживать
совместимость с ранними версиями интерфейса, а
также из предубеждения, что пользователи<a name="p23"></a> 
непременно отнесутся с неодобрением к
попыткам отойти от старых, привычных принципов
построения интерфейсов. Действительное
усовершенствование интерфейсов возможно, если
подходы к их разработке будут серьезно
пересмотрены. При этом разработчику необходимо
найти компромисс между оправданным применением уже
устоявшихся парадигм, которые облегчают изучение
интерфейса пользователем, и новыми подходами,
которые позволяют сделать интерфейс более удобным
и практичным. Конечно, в ситуации, когда часто
меняется состав группы разработчиков или круг
потребителей продукта, стремление придерживаться
известных подходов, возможно, было бы лучшим
решением. <i>Но в тех случаях, когда известно, что
большая часть времени у пользователей будет
уходить на рутинные, повторяющиеся операции, а
обучение в то же время не потребует больших
затрат, верным решением является разработка
интерфейса с максимальной продуктивностью, даже
если впоследствии от пользователя потребуются
некоторые усилия по его изучению.</i></p>

<h2>1.5. Разработка интерфейса как часть общего
цикла разработки</h2>

<p>
Применяемые сегодня методы разработки проектов
зачастую не считаются с необходимостью разработки
интерфейса. Это упущение может быть следствием
того, что специалисты по разработке интерфейсов
привлекаются к проекту слишком поздно, когда
возможности улучшения качества взаимодействия
между пользователем и продуктом большей частью уже
потеряны. Интерфейсом удобнее всего заниматься
именно на начальных стадиях разработки. И если
специалисты по интерфейсам привлекаются уже после
того, как программное обеспечение спроектировано и
определены его инструменты или когда разработка
программы уже почти завершена, то их рекомендации
могут потребовать переделки всей выполненной
работы, что, естественно, является неприемлемым.
Когда бюджет проекта уже исчерпан и рабочий план
почти завершен, перспектива отказа от большей
части или даже всего дизайна и готового кода,
конечно, не может вызвать энтузиазма у менеджеров
проекта. Так что даже в такой современной книге по
управлению проектами, как &laquo;UML Toolkit&raquo;
(Eriksson and Magnus, 1998), не говорится о
необходимости рассматривать интерфейс уже на
стадии анализа требований к проекту, которую
авторы обозначают как первую фазу его разработки.
Однако в действительности разработка интерфейса не
должна откладываться до стадии технической
реализации, которая в плане Эриксона и Магнуса
является третьей фазой. <i>Определив задачу, для
которой продукт предназначен, сначала
спроектируйте интерфейс, после чего приступайте к
его реализации.</i> Это повторяющийся процесс.
Определение задачи будет меняться во время
разработки интерфейса. Поэтому весь процесс
разработки продукта будет проходить в соответствии
с изменениями в задаче продукта и его интерфейсе.
Здесь необходимо стремиться к максимальной
гибкости.<a name="p24"></a> 
На первом этапе разработки следует
определить, что именно должен сделать пользователь
для получения того или иного результата и как
система должна отвечать на каждое его действие.</p>

<p>
<i>Пользователи не задумываются над тем, как
устроена машина, пока она справляется со своими
задачами.</i> При этом не имеет значения, какой
именно процессор используется и является ли язык
программирования объектно-ориентированным,
многопоточным или, быть может, называется
какими-то другими умными словами. Для
пользователей важнее всего удобство и результаты.
Но все, что они видят,&nbsp;&mdash; это интерфейс. Другими
словами, <i>с точки зрения потребителя именно
интерфейс является конечным продуктом</i>.</p>

<blockquote>
<p>
<b>Ваше время бесценно, ваша работа священна</b></p>

<p>
Я приучился часто сохранять проделанную работу,
чтобы даже в случае системного сбоя не потерять
большую часть своего труда. В конце каждого абзаца
или даже после нескольких предложений я при помощи
сочетания клавиш вызываю команду сохранения. Эта
команда создает копию текста на диске, где он
может оставаться относительно защищенным от потери
в случае сбоя. Приблизительно каждый час я создаю
резервную копию своей работы с помощью
энергонезависимого запоминающего устройства,
которое может быть физически извлечено из
компьютера и таким образом защищено от любых
неожиданностей в его работе. Кроме того, каждую
неделю я сохраняю резервную копию всей системы на
внешнем диске. Это не значит, что я параноик,&nbsp;&mdash;
я всего лишь считаю, что такой подход практичен.
Однако необходимости во всех этих сложных
процедурах не должно возникать. <i>Система должна
рассматривать все данные, вводимые пользователем,
как бесценные.</i> И если перефразировать Первый
закон робототехники Азимова: &laquo;Робот не может
причинить вред человеку или своим бездействием
допустить, чтобы человеку был причинен вред&raquo;, то
первый закон проектирования интерфейсов должен
звучать примерно так: &laquo;Компьютер не может
причинить вред данным пользователя или своим
бездействием допустить, чтобы данным был причинен
вред&raquo;.</p>

<p>
Работая над этой книгой, я по совету своих
редакторов стал использовать опцию, позволяющую
либо принять, либо отклонить изменения, внесенные
в документ. Каждый раз, сделав несколько
изменений, я запускал команду сохранения. Когда
произошел сбой системы, я не стал беспокоиться,
полагаясь на сделанные мной периодические
сохранения. Однако когда я попытался найти файлы с
самыми последними изменениями, это не удалось, и
мне пришлось делать ту же работу заново. Немного
поэкспериментировав, я выяснил, что при включенной
опции &laquo;принять или отклонить&raquo; команда
сохранения, подаваемая с клавиатуры, перестает
действовать. Однако пользователю никакого
предупреждения об этом не дается. В результате<a name="p25"></a> 
пропало больше трех часов моего труда, и
мне пришлось тратить время на эксперименты и
выяснять, что же произошло и как это предотвратить
в будущем. Если не считать излишней сложности
сегодняшних компьютерных систем, именно такие
досадные мелочи говорят о необходимости
усовершенствования подходов к разработке
интерфейсов.</p>

<p>
Наилучшей формулировкой второго закона интерфейса
может быть следующее утверждение: <i>&laquo;Компьютер
не должен тратить впустую ваше время или вынуждать
вас выполнять действия сверх необходимых&raquo;.</i> В
разделе 4.3 будет рассматриваться измерение объема
работы, необходимого для выполнения той или иной
задачи.</p>
</blockquote>

<h2>1.6. Определение человекоориентированного
интерфейса</h2></p>

<div class="epigraph"><blockquote>
<p>Можно создать самолет с любыми
техническими характеристиками, которые только
пожелает Министерство военно-воздушных сил, если
при этом не требуется, чтобы он мог летать.</p>
<cite>Вилли Мессершмидт (выдающийся немецкий
авиаконструктор времен второй мировой
войны)</cite></blockquote></div>

<p>
<i>Интерфейс является ориентированным на
человека, если он отвечает нуждам человека и
учитывает его слабости.</i> Чтобы
создать такой интерфейс, необходимо иметь
представление о том, как действуют люди и машины.
Кроме того, следует развить в себе способность
чувствовать те трудности, с которыми сталкиваются
люди. И это не всегда просто. Мы настолько
привыкли к тому, как работают программы, что
соглашаемся принять их методы работы как
данность,&nbsp;&mdash; даже в тех случаях, когда их
интерфейсы неоправданно сложны, запутанны,
неэкономны и побуждают людей к ошибкам.</p>

<p>
Многие из нас испытывают раздражение, например, от
того, что для запуска (иначе говоря, загрузки)
компьютера требуется какое-то время. В 1999 году
была реклама одного автомобильного радиоприемника
со встроенным компьютером, в которой утверждалось,
что &laquo;в отличие от домашнего компьютера, эта
система не заставит вас долго ждать, пока она
загрузится&raquo;. Внимательное изучение шести наиболее
серьезных работ в области разработки интерфейсов
показывает, что даже в этих книгах, написанных в
основном в то время, когда разработке интерфейсов
стали придавать важное значение, проблема загрузки
не упоминается (Shneiderman, 1987; Norman, 1988;
Laurel, 1990; Tognazzini,  1992; Mayhew, 1992;
Cooper, 1995). Тем не менее, я уверен, что каждый
из названных авторов всецело согласился бы с тем,
что сокращение или устранение задержки при запуске
компьютера улучшило бы эффективность его
использования, тем более что я еще не встречал
пользователя, у которого такая задержка не
вызывала бы раздражение.<a name="p26"></a> 
Однако никогда не существовало технической
необходимости в том, чтобы компьютер после
включения начинал работать более чем через
несколько секунд. Наши компьютеры долго
загружаются только лишь потому, что многие
дизайнеры и разработчики не потрудились сделать
интерфейс в этом отношении ориентированным на
человека. Кроме того, некоторые люди думают, что
если компьютеры с медленной загрузкой продаются
миллионами, то это якобы свидетельствует об их
высокой производительности.</p>

<p>
Нельзя сказать, что проблема долгой загрузки
машины всегда игнорировалась. Уже вышедший из
употребления Apple Newton, Palm Pilot и другие
карманные компьютеры могут запускаться мгновенно,
а появление на некоторых компьютерах &laquo;спящего
режима&raquo;&nbsp;&mdash; состояния, в котором компьютер
потребляет меньше энергии, чем в обычном режиме, и
из которого он может быть быстро переведен в
рабочее состояние,&nbsp;&mdash; это шаг в правильном
направлении.</p>

<p>
Инженерам удавалось с успехом решать и более
сложные проблемы. Например, в ранних моделях
телевизоров необходимо было ждать около минуты,
пока разогревалась катодная трубка кинескопа. В
некоторых моделях инженеры добавили специальную
схему, которая поддерживала катодную трубку в
теплом состоянии, что позволило сократить время
достижения рабочей температуры. (Поддержание
катодной трубки в разогретом состоянии потребовало
бы большого расхода электричества и уменьшило бы
срок ее службы.) В другом варианте был разработан
кинескоп с катодной трубкой, которая разогревалась
в течение нескольких секунд. И в том и в другом
случае интересы пользователя были удовлетворены. В
начале двадцатого столетия был создан автомобиль
на паровой тяге, называвшийся Стенли Стимер
(Stanley Steamer). Несмотря на все свои очевидные
достоинства, этот механизм не имел успеха из-за
одного недостатка: чтобы тронуться с места, от
момента зажигания до достижения необходимого
давления в котле требовалось подождать 20 минут.</p>

<p>
Принцип разработки, согласно которому программные
продукты не должны вынуждать пользователя ждать
без необходимости, можно считать очевидным и
ориентированным на человека. Таким же является и
стремление не подгонять пользователя. В общем виде
этот принцип можно было бы сформулировать
следующим образом: <i>&laquo;Ритм взаимодействия
должен устанавливаться самим пользователем&raquo;.</i></p>

<p>
Не требуется обладать большими техническими
знаниями, чтобы понять, что большая пропускная
способность коммуникационных линий может ускорить
передачу веб-страниц. Однако другие взаимосвязи
иногда бывают не столь очевидны. Поэтому для
разработчиков интерфейсов &laquo;человек-машина&raquo; важно
знать внутренние механизмы технологии. В противном
случае у них не будет возможности оценивать
достоверность утверждений, высказанных, например,
программистами или специалистами по аппаратной
разработке относительно осуществимости тех или
иных элементов интерфейса.</p>

	<div class="page">
	<p class="back"><a href="preface.html">&lt;=&nbsp;Previous</a></p>
	<p class="next"><a href="chapter2.html">Next&nbsp;=&gt;</a></p>
	</div>

