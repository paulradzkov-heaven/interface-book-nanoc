--- 
title: 7. Проблемы за пределами пользовательского интерфейса
---

<p>
<a name="p229"></a>
<h1>7. Проблемы за пределами пользовательского
интерфейса</h1></p>

<div class="slogan">
<blockquote><p>Утверждение, что следует развивать
привычку думать о том, что мы делаем, часто
повторяется в учебниках и в речах известных людей
и является абсолютно ошибочной избитой фразой.
Верно совершенно обратное. Развитие цивилизации
связано с увеличением числа важных операций,
которые мы можем выполнять не
задумываясь.</p><cite>
Альфред Норф
Уайтхед</cite></blockquote></div>

<p>
В этой главе будет представлено попурри из случаев
применения нестандартного мышления (или
не-мышления), которые могут быть полезными для
разработчиков в разных областях технологии. В
разделе 7.1 будет затронута проблема, связанная с
тем, что среды программирования имеют, наверное,
самые худшие интерфейсы в компьютерной индустрии.
Мы рассмотрим два аспекта, в которых могут быть
сделаны улучшения. Один из них заключается в том,
что сложность системного окружения и сред
программирования достигла таких высоких уровней,
что это отбивает у начинающего программиста
стремление к экспериментированию и изучению среды
в процессе работы. Второй аспект связан с тем, что
хотя всем известно, что документирование является
полезным, оно по большей части не выполняется.
Небольшое изменение в языках программирования
могло бы позволить упростить весь процесс.</p>

<p>
В разделе 7.2 рассматривается проблема изобилия
кабелей (или шнуров), которые растут из наших
компьютеров подобно змеям из головы медузы
Горгоны. Зачастую оказывается трудно подобрать
кабель требуемого типа, с необходимым
переходником, вилкой или разъемом.
Эту<a name="p230"></a> проблему можно было бы решить, если бы кабели
не имели разные концевые соединения типа &laquo;папа&raquo;
и &laquo;мама&raquo;, а каждый кабель, предназначенный для
определенной функции, соединялся бы с любым другим
кабелем или разъемом в компьютере, что вполне
осуществимо.</p>

<p>
В разделе 7.3 рассматриваются вопросы этики. При
создании интерфейсов разработчик находится в
близком и продолжительном контакте с разумом и
телом пользователя. Это влечет за собой
определенную ответственность. В учебных программах
и тренингах для специалистов в области разработки
интерфейсов уже много было сказано о том, что
должно быть предусмотрено для защиты интересов
пользователей. Но мало кто говорит о том, какие
охранные меры и какая социальная защита требуются
для того, чтобы дать возможность компетентному
разработчику делать свою работу хорошо.</p>

<p>
<a name="s7.1"></a><h2>7.1. Более человекоориентированные среды
программирования</h2></p>

<p>
<h3>7.1.1. Системное окружение и среда разработки</h3></p>

<p>
Исследования в области когнетики для сред
программирования нашли еще меньшее применение, чем
для пользовательских интерфейсов. Нечего и
говорить, что современные системы становятся все
более сложными и что инструменты программирования
должны соответствовать этой сложности. Простые
вещи стали излишне сложными, и мы не смогли пока
создать достаточно хорошие инструментальные
программные средства для облегчения этих
сложностей работы в современных компьютерных
средах.</p>

<p>
Я начну с простого примера. В давно исчезнувшем
компьютере Apple II для того, чтобы написать
программу сложения двух чисел, требуется включить
компьютер (время загрузки не заметно!) и нажать
<kbd>&lt;Control&gt;+&lt;b&gt;</kbd>,  после чего вы
переходите в BASIC. Если вы теперь наберете <kbd>PRINT
3+4</kbd> и нажмете <kbd>&lt;Return&gt;</kbd>, то сразу
же и без трудностей получите 7. С момента запуска
BASIC до получения результата прошло 5&nbsp;с. Как
хорошо известно, в компьютерной промышленности
простота использования достигается с помощью
довольно больших ресурсов памяти и скорости.
Поэтому мы понимаем, что компьютер Apple II
способен выполнять вычисления с такой быстротой и
простотой именно потому, что он обладает
мощнейшими ресурсами: имея 2-мегагерцовый 8-битный
процессор, 48 Кбайт памяти (и это все, что можно
вместить!) и 400 килобайтовый диск, машина
работает как зверь. В 1999 году на выполнение этой
операции у компьютера с 400-мегагерцовым 32-битным
процессором, 192 мегабайтовый RAM-памяти и
несколькими гигабайтами памяти на жестком диске
уходит более 3 минут. Судя по разрядности
системной шины и тактовой частоте процессора,
новая машина работает приблизительно в 1500 раз
быстрее, чем старая. Если же оценивать по времени,
которое требуется для написания
программы,<a name="p231"></a> новая машина оказывается медленнее
приблизительно в 36 раз.</p>

<p>
Я попросил двух профессиональных программистов
написать программу на Visual Basic (VB), которая
бы выполняла сложение 3+4 и выдавала результат на
экран. Первый программист начал жаловаться, что у
машины всего только 8 Мбайт памяти и что у нее
устаревший 75-мегагерцовый  32-битовый процессор.
Не считая времени загрузки (2 мин.), среда
программирования была открыта через 54&nbsp;с. После
этого требовалось открыть модуль вставки (Insert
Module), потом открыть окно опций (Option Box) и
установить соответствующие настройки, создать
кнопку и рабочую форму, после чего программист
должен был набрать среднюю строку из следующего
текста:</p>

<p>
<code>
Private sub Command1_Click ()

<br/>
&nbsp;&nbsp;MsgBox 3 + 4

<br/>
End Sub
</code></p>

<p>
Для того чтобы воспользоваться этой программой, ее
нужно было сначала запустить, а потом нажать
кнопку для ее включения. В течение этого процесса,
который занял 3 мин. 40 с (опять же, не считая
времени начальной загрузки), было сделано всего
только две или три ошибки.</p>

<p>
Другой программист, работавший на 64-битовом
процессоре с тактовой частотой 75 Мгерц и 40 Мбайт
памяти, запустил VB и выполнил ту же задачу за 28
с (что приблизительно в 5 раз медленнее, чем на
компьютере Apple II). Программа, созданная
несколько иным способом, была следующей:</p>

<p>
<code>
Private sub Form-Load ()

<br/>
&nbsp;&nbsp;MsgBox Str (3 + 4)

<br/>
End Sub
</code></p>

<p>
Я спросил у этого программиста, почему он не
написал вторую строку так же, как ее написал
первый программист:</p>

<p>
<code>
MsgBox 3 + 4
</code></p>

<p>
Он ответил, что не был уверен, что это будет
работать. Другими словами, он не знал точно, как
VB будет работать в этом случае. Здесь нет ничего
странного: как и другие современные компьютерные
языки, VB имеет довольно сложное и
непоследовательное построение. Оправданием его
громоздкости может быть то, что он позволяет
сделать большие проекты проще, однако это не может
быть оправданием для того, чтобы делать простые
вещи сложными. Большие вещи состоят из множества
малых, поэтому чем проще сделаны составные задачи,
тем проще становится вся задача в целом. Именно
плохая организация системы и языка является
причиной того, почему один опытный программист
допустил ошибки, а другой&nbsp;&mdash; не был уверен в
правильности синтаксиса простой программы. Те же
самые результаты я получил и с
тремя<a name="p232"></a> другими программистами, работающими со
Smalltalk; это показывает, что данные проблемы
относятся не только к VB. Очевидно, что каждый из
этих языков обладает множеством преимуществ, но
если бы они и особенно их среды были хорошо
разработаны с точки зрения человеческих факторов,
эти преимущества достигались бы с меньшими
неудобствами и меньшим числом ошибок со стороны
человека.</p>

<p>
Таким образом, было утрачено нечто удивительно
непосредственное, в частности, немедленная
обратная связь, в которой человек нуждается для
того, чтобы иметь возможность быстро создавать
эффективные программы. Я не настолько наивен,
чтобы думать, что мы можем вернуться к прежней
простоте и достичь того уровня сложности, который
требуется от современных программ. Но я уверен,
что мы можем сделать в этом много улучшений.</p>

<p>
<h3>7.1.2. Важность ведения документации при
создании программ</h3></p>

<p>
Во многих источниках сообщается, что для
программистов важно подробно документировать
машинный код, который они пишут. Для этого обычно
приводятся две причины: во-первых, чтобы помочь
понять программу при ее чтении (Knuth, 1992,
с.&nbsp;99), и, во-вторых, чтобы упростить адаптацию
программы к новым условиям (Weinberg, 1971,
с.&nbsp;164). Обычно в программе рядом со строками кода
можно встретить комментарии (чаще однострочные).
Многие программы бывают почти полностью лишены
комментариев.</p>

<p>
Как отметил Кнут (Knuth), написание комментария
<i>до</i> или во время создания кода может помочь
процессу написания, улучшить структуру алгоритмов,
снизить число ошибок и повторных написаний
программы, необходимых для завершения проекта, а
также дает другие преимущества, которые обычно
упоминаются по поводу комментариев. По всей
видимости, правильность выводов Кнута имеет
основания с точки зрения когнетики.</p>

<p>
Когда мы как опытные программисты разрабатываем
алгоритмы и пишем код, этот процесс отчасти
происходит на бессознательном уровне. Как уже было
отмечено, эта ментальная область может быть
подвержена противоречиям. Предполагаю, что причина
некоторых программных ошибок заключается в том,
что когнитивное бессознательное переживает
противоречие между тем, что мы хотим сделать, и
тем, что должен сделать компьютер в соответствии с
нашим кодом.</p>

<p>
Однако для того, чтобы ясно выразить свои
намерения на естественном языке, нам следует
сделать процесс мышления сознательным, и именно в
когнитивном сознательном эти противоречия быстро
становятся очевидными. Даже если эта гипотеза
неправильна, написание комментариев вынуждает нас
тщательнее обдумывать решаемую задачу для разных
условий и с разных точек зрения.</p>

<p>
<a name="p233"></a>
К сожалению, среды программирования были
разработаны таким образом, что вносить комментарии
в создаваемые программы не просто. Например,
комментарии во многих языках программирования
ограничиваются одной строкой, а если многострочные
комментарии допустимы, то в них часто не
используется перенос текста или другие
возможности, которые должны быть в простейших
текстовых редакторах (исключения составляют UCSD
Pascal и Oberon). Чтобы в языке Visual Basic,
появившемся в 90-х годах, написать комментарий
размером с абзац, вам приходится вручную делать
перенос текста. По легендам, программисты не
особенно грамотно умеют писать, поэтому проверка
орфографии должна быть включена в каждую среду
программирования, однако в программных средах эта
служба почти никогда не встречается. В
существующей версии Mathematica, которая является
в общем превосходной программой для работы с
математическими выражениями, комментарии были
убраны из программ и помещены в специальное окно,
что является совершенно неправильным шагом. Только
некоторые системы (как, например, созданная Кнутом
программа WEB (1992)) были разработаны таким
образом, чтобы способствовать ведению
документации. Другой, менее сложный, но достаточно
эффективный метод, был использован автором этой
книги (Lammers, 1986, с.&nbsp;226).</p>

<p>
Для сохранения работоспособности программы любым
вносимым в нее изменениям должны предшествовать
изменения в сопровождающих ее комментариях.
Аналогично тому, как нет необходимости разделять
разные формы использования компьютера в виде
приложений, программирование не должно как-то
особенно отличаться от других видов работы,
которые пользователь выполняет с помощью
компьютера. Опыт показывает, что большинство
пользователей компьютеров с неохотой относятся
даже к попыткам программирования. Наверное,
некоторые преимущества программирования были бы
более понятны, если бы процесс программирования
был настолько интегрирован со средой, что
отдельные программные структуры могли бы
использоваться без необходимости учить весь язык
или среду программирования. Было бы также полезно
иметь возможность комбинировать функции из разных
языков, однако это не должно быть смесью, подобной
PL/I, но, скорее, должен использоваться метод
слияния, предложенный в этой книге для приложений.
Вероятно, весьма ценным был бы вариант, в котором
комбинировались бы структуры LISP для обработки
списков, структуры APL (или разновидности этого
языка J) для обработки массивов, мощные методы
обработки строк из языка SNOBOL, механизмы
наследования и объекты из Smalltalk и т.д.</p>

<p>
Разработчики языков программирования и эксперты по
интерфейсам слишком редко работают вместе, и хотя
когнетика позволяет усовершенствовать компьютерные
интерфейсы, следует в максимальной степени
использовать также сочетание современных методов
разработки языков программирования с нашими
знаниями о человеческих фактоpax.<a name="p234"></a> 
Этот вопрос, до сих пор сохраняющий свою
актуальность, был рассмотрен в одной из самых
ранних книг Вейнберга в области разработки
интерфейсов человек-машина &laquo;Психология
компьютерного программирования&raquo; (Weinberg,
&laquo;Psychology of Computer Programming&raquo;,
опубликована в 1971&nbsp;г.), которая намного опередила
свое время и до сих пор остается для нас
откровением.</p>

<p>
<a name="s7.2"></a><h2>7.2. Режимы и кабели</h2></p>

<p>
Программное обеспечение работает на основе
аппаратного обеспечения. Если вы не можете
определить, как соединить между собой блоки
аппаратного обеспечения, программное обеспечение
превращается в бесполезные биты информации.
Кабель&nbsp;&mdash; несколько проводов или
волоконно-оптических линий, соединенных вместе и
имеющих на каждом конце по разъему,&nbsp;&mdash; является
одним из простейших элементов аппаратного
обеспечения. Кабели должны присоединяться и
отсоединяться от компьютера независимо от того,
включен он или нет (кабели, которые нельзя
заменять без выключения питания (&laquo;not
hot-swappable&raquo;), являются модальными!). У
пользователя не должна возникать необходимость
изменять конфигурацию устройств, как это требуется
при использовании SCSI-соединений. В стандартах
USB и FireWire эти проблемы учитываются. Однако
есть другие проблемы интерфейсов, которые не
учитываются даже в новых стандартах. Например,
ситуация, когда кабель имеет неподходящий &laquo;пол&raquo;
разъема, вызывает раздражение. Поскольку кабели
могут иметь разные разъемы (&laquo;папа&raquo; и &laquo;мама&raquo;),
и так как некоторые части оборудования могут иметь
соединители или для одного типа разъема
(&laquo;папа&raquo;), или для другого (&laquo;мама&raquo;), это
приводит к тому, что каждый тип кабеля может иметь
огромное число модификаций. Многие владельцы
компьютеров покупают адаптеры для инверсии
&laquo;пола&raquo;, поскольку они дешевле и меньше по
размеру, чем кабели. Допустим, что у вас есть
только кабель с двумя типами разъемов
(&laquo;папа-мама&raquo;), а вам требуется соединить два
устройства, в которых есть разъемы только одного
типа (&laquo;мама&raquo;). В этом случае вы можете либо
приобрести кабель с двумя разъемами
соответствующего типа (&laquo;папа-папа&raquo;), либо купить
адаптер типа &laquo;папа-мама&raquo; и присоединить его к
одному из концов (&laquo;мама&raquo;) кабеля, который у вас
уже есть. В результате вы получите кабель
(&laquo;папа-папа&raquo;), который будет подходить для
соединения двух устройств с симметричными
разъемами (&laquo;мама-мама&raquo;).</p>

<p>
Эту проблему можно избежать, но методы, которые
обычно предлагаются, не работают. Одно из решений,
о котором я слышал, заключается в том, чтобы на
оборудовании устанавливать разъемы одного типа
(скажем, &laquo;мама&raquo;), а на кабелях все разъемы
сделать другого типа (соответственно, &laquo;папа&raquo;).
Но даже в этом случае будут нужны адаптеры типа
&laquo;мама-мама&raquo; для соединения двух коротких кабелей
в один длинный, или же производители должны будут
подумать о выпуске
кабельных<a name="p235"></a> шнуров типа &laquo;папа-мама&raquo;, чтобы их
можно было использовать для удлинения. Следуя этой
логике, можно прийти к ситуации, в которой
потребуется использовать все возможные комбинации
между соединениями &laquo;папа&raquo; и &laquo;мама&raquo; на кабелях
и адаптерах, даже если по стандарту все соединения
на оборудовании будут иметь разъемы типа &laquo;мама&raquo;.</p>

<p>
Обычная соединительная пара состоит из штекерного
разъема (&laquo;папа&raquo;) и гнездового разъема
(&laquo;мама&raquo;). В результате появляется набор из
следующих восьми типов деталей, которые могут
использоваться как соединители для оборудования и
кабельных шнуров:</p>

<ul>

<li>соединитель &laquo;папа&raquo; для оборудования;</li>

<li>соединитель &laquo;мама&raquo; для оборудования;</li>

<li>соединитель &laquo;папа&raquo; для кабельных шнуров;</li>

<li>соединитель &laquo;мама&raquo; для кабельных шнуров;</li>

<li>адаптеры &laquo;папа-мама&raquo;;</li>

<li>адаптеры &laquo;мама-папа&raquo;;</li>

<li>адаптеры &laquo;папа-папа&raquo;;</li>

<li>адаптеры &laquo;мама-мама&raquo;.</li>

</ul>

<p>
При использовании гермафродитных соединителей
любые два кабеля можно соединить вместе и любой
кабель может быть присоединен к любому разъему в
оборудовании. Таким образом, весь набор типов
соединителей сводится к следующим двум типам:</p>

<ul>

<li>соединитель для оборудования;</li>

<li>соединитель для кабельных шнуров.</li>

</ul>

<p>
С точки зрения электротехники для каждого вида
сигнала требуется использовать свой тип кабеля, но
в каждом классе кабелей ни с точки зрения
электротехники, ни с точки зрения производства
ничто не мешает использовать гибридные (так
называемые гермафродитные) соединители, не
разделяющиеся на тип &laquo;папа&raquo; или &laquo;мама&raquo;. Любые
два соединителя-гермафродита данного класса могут
быть соединены вместе. Более того, любой вид
соединения для проведения электронного сигнала или
питания может быть выполнен с помощью
гермафродитных соединителей. Они могут
использоваться в качестве многоштекерных
соединителей, разъемов питания, а также для
коаксиальных кабелей<a name="r52" href="#f52"><sup>52</sup></a>.</p>

<p>
<a name="p236"></a>
Если имеются два гермафродитных соединителя
данного класса, вы можете их использовать как два
разных кабеля или соединить их в один длинный
кабель. В некоторых случаях
соединитель-гермафродит мог бы быть не сложнее и
не дороже соединителя с определенным &laquo;полом&raquo;.
Однако это не всегда будет так. Во многих случаях
гермафродитный соединитель будет несколько сложнее
и дороже в производстве, но это будет
оправдываться следующими факторами:</p>

<ul>

<li>большее удобство для пользователя;</li>

<li>более простые инструкции;</li>

<li>меньший объем производственной наладки;</li>

<li>меньшее количество деталей, которые нужно
складировать продавцам и распространителям.</li>

</ul>

<p>
На рис.&nbsp;7.1 показана схема четырехпроводного
линейного гермафродитного соединителя. При
линейном расположении <var>n</var> проводов требуется
минимум <var>2n-1</var> контактов. По схеме
проводов на рис.&nbsp;7.2 можно понять, каким образом
работают такие соединители. На рис.&nbsp;7.3 показаны
выходы из гермафродитного коаксиального
соединителя. Эту идею можно использовать и для
многожильных редакторакоаксиальных проводов. Для
того чтобы получить более удобные интерфейсы
человек-машина, мы готовы платить за более сложные
компьютеры. Этот же принцип должен быть применен к
сумасшедшему клубку проводов и кабелей, которым
вечно опутан компьютер и пользователь. Может
показаться, что нужна какая-то линейная схема с
меньшим, чем <var>2n-1</var>, числом контактов,
но здесь следует учесть возможность использования
кабелей для удлинения.</p>

<div class="image">
<center><img
src="img_7-1.jpg" alt=""/><br/><caption><i><b>Рис.&nbsp;7.1.</b>
Гермафродитный четырехпроводный соединитель.
Четыре провода обозначены как а, b, с и
d</i></caption></center></div>

<div class="image">
<a name="p237"></a>
<center><img
src="img_7-2.jpg" alt-""/><br/><caption><i><b>Рис.&nbsp;7.2.</b>
Гермафродитные кабели могут использоваться для
соединения компонентов оборудования (см. нижнюю и
верхнюю части каждой колонки), а также для
удлинения кабелей (см. правую
колонку)</i></caption></center></div>

<div class="image">
<center><img
src="img_7-3.jpg" alt=""/><br/><caption><i><b>Рис.&nbsp;7.3.</b>
Выходы в гермафродитном коаксиальном соединителе.
Внешняя изолирующая оболочка с четырьмя зубцами,
аналогичными изображенным, но с увеличенными
концами и соединительным расширением снизу (не
показаны), служит для
сцепления</i></caption></center></div>

<p>
<a name="s7.3"></a><h2>7.3. Этика и управление разработкой
интерфейсов</h2></p>

<div class="slogan">
<blockquote><p>Разумный человек приспосабливает
себя к миру. Неразумный человек стремится
приспособить мир к себе. Следовательно, весь
прогресс зависит от людей неразумных.</p><cite>
Бернард
Шоу</cite></blockquote></div>

<p>
Трудно создать хороший интерфейс, если руководство
не понимает, что разработка интерфейса является
достаточно важным этапом. В краткосрочной
перспективе тщательный подход к разработке
интерфейса может увеличить расходы и время на
создание продукта. Мой опыт показывает, что
краткосрочный подход является неверным даже в
краткосрочном периоде, поскольку улучшение
пользовательского интерфейса часто упрощает
разработку. Тщательное проектирование и детальное
определение технических и других требований не
замедляют,<a name="p238"></a> 
а, наоборот, ускоряют процесс разработки.
Создание качественного интерфейса полезно и с
точки зрения долгосрочной перспективы, поскольку в
результате приводит к

<ul>

<li>большей продуктивности работы пользователя;</li>

<li>большему удобству для пользователя;</li>

<li>большей ценности в глазах покупателя;</li>

<li>уменьшению расходов на поддержку покупателей;</li>

<li>ускорению и упрощению процесса внедрения;</li>

<li>преимуществу перед конкурентами на рынке;</li>

<li>лояльности к данной марке;</li>

<li>упрощению инструкций и онлайновой помощи;</li>

<li>более безопасным продуктам.</li>

</ul></p>

<p>
Разработчики интерфейсов редко когда имеют
возможность контролировать, в какой момент в
процессе разработки проекта начнется создание
интерфейса и какое значение будет придаваться его
проблемам. В тех случаях, когда созданию
интерфейса отдается главенствующая роль, как это
было в проекте Macintosh, это дает поразительные
результаты.</p>

<p>
Если не учитывать, что данная область является
довольно новой, и поэтому мало кто из специалистов
в этой области пока поднялся до управляющих
должностей, другой проблемой является то, что
разработчики интерфейсов имеют небольшое влияние.
Однако идет некоторая работа по решению этой
проблемы с помощью предложения образовательных
стандартов и тестов. Тем не менее, обладание
такого сертификата у специалиста еще не является
гарантией его компетентности. Здесь речь идет о
другой стороне этой проблемы. Даже если
разработчик является достаточно компетентным, от
него (или нее) часто требуют создавать плохие
интерфейсы. В этом отношении можно только
позавидовать врачам, потому что для них
предусмотрены юридические защитные меры, которые
позволяют им выполнять свою работу правильно.
Например, врач может предъявить судебный иск за
незаконное увольнение при отказе выполнять
действия, угрожающие состоянию здоровья пациентов.
Строительные инженеры могут обращаться в суд в
случае увольнения за отказ нарушить каноны,
принятые в их профессии.</p>

<p>
Специалисты по разработке интерфейсов работают в
области, в которой неправильные решения могут
вызвать физические поражения и способствовать
психологическим расстройствам. Например, если
интерфейс создает необходимость слишком часто
нажимать на клавиши или кнопку мыши, это может
привести к возникновению или обострению
хронического стрессового нарушения (repetitive
stress injuries). Плохой интерфейс может вызывать
психологические расстройства. Таким образом,
требуется создание основы для установления
юридических норм защиты добросовестных
специалистов. Другой необходимостью<a name="p239"></a> 
является установление определенных
профессиональных стандартов (речь идет не о
стандартах разработки интерфейсов). Меры,
упомянутые в этой книге, а также те, которые будут
разработаны в будущем, могут помочь установить
количественные, объективные нормы. Например,
инженер-строитель должна показать, что она
спроектировала мост, который отвечает
установленным стандартам, в соответствии с
которыми этот мост должен выдерживать нагрузку,
скажем, в два раза превышающую минимально
возможный уровень. Выбросы из автомобиля должны
содержать не более 0,2% CO для того, чтобы этот
автомобиль мог быть сертифицирован. Аналогичным
образом, мы могли бы установить, что интерфейс
текстового процессора не может быть принят, если,
скажем, его общая информационно-теоретическая
эффективность меньше 0,7 или если общая символьная
производительность является меньше 0,8, а
отдельные элементы имеют эффективность меньше 0,5.</p>

<p>
Критерии могут быть также подобраны таким образом,
что для некоторого числа наиболее часто
используемых задач средневзвешенное время
выполнения, а значит, и количество нажатий на
клавиши, движений с помощью ГУВ и нажатий на его
кнопку в новом текстовом процессоре не должно
превышать значений, которые достигнуты в любом
предыдущем или современном коммерческом продукте,
предназначенном для аналогичной цели. Продукты,
которые удовлетворяют данным критериям, могут
получать какую-то форму сертификации. Эти критерии
будут автоматически изменяться по мере развития
интерфейсной технологии. В настоящее время новые
продукты часто оказываются сложнее в
использовании, чем старые, но это нельзя понять до
тех пор, пока вы не попробуете это проверить на
собственном опыте. Поскольку эти критерии касаются
эффективности, т.е. в конечном счете определяют
итоговый результат работы пользователя, то
руководители проекта должны уделять им особое
внимание. От публикации объективных нормативов
качества интерфейсов выиграют не только
разработчики и руководители проекта, но также и
покупатели.</p>

<p>
Стив Уайлдстром (Steve Wildstrom), который
публикует свои статьи в еженедельнике <i>Business
Week</i>, указывает, что &laquo;производители
компьютеров и, в особенности, разработчики
программного обеспечения, часто думают, что
требования Единого коммерческого кодекса (Uniform
Commercial Code) касаются не их, а кого-то
другого&raquo; (частный разговор, октябрь 1998&nbsp;г.).
Многие современные лицензии на программное
обеспечение, навязываемые покупателям, не
гарантируют им даже того, что это программное
обеспечение будет выполнять задачу, о которой
сообщалось в рекламе. Во многих таких документах
прямым образом отрицается понятие merchantability
(годности для продажи), которое означает буквально
следующее: продажа данного продукта автоматически
предполагает, что этот продукт способен выполнять
задачу, для которой он, по заявлению продавца,
предназначен. В некоторых штатах США были приняты
законы, запрещающие
отказ<a name="p240"></a> от подтверждения &laquo;годности к продаже&raquo; для
продуктов компьютерного производства. Все
верховные власти должны поступить так же.</p>

<p>
Система оценки качества интерфейсов,
осуществляемая независимой организацией, может
быть полезной для покупателей тех продуктов, в
которых интерфейсный компонент выполняет
значительную роль. Сама разработка
пользовательского интерфейса не должна как-то
регулироваться или ограничиваться. Следует
избегать применения принципов, основанных на
использовании конкретных интерфейсных механизмов,
чтобы не подавлять стремление к нововведениям.
Однако введение относительных количественных
нормативов продуктивности для продуктов одного
типа побудит разработчиков двигаться в правильном
направлении.</p>

<p>
Нужно найти тонкий баланс между созданием
настолько нового продукта, что опытные
пользователи, привыкшие к обычным интерфейсам,
почувствуют неудобство в его использовании, и
созданием продукта с интерфейсом, который
настолько не отличается от стандартного
графического пользовательского интерфейса, что его
никак нельзя считать результатом нашего желания в
максимальной степени помочь пользователю. С одной
стороны, мы должны избежать новизны как таковой,
хотя с другой стороны, мы не должны терять ценную
возможность выиграть на рынке из-за того, что
декалькируем аналогичные существующие продукты.</p>

<p>
В бизнесе разработки интерфейсов давно существует
миф о том, что &laquo;расширение функциональности и
сохранение простоты использования не могут быть
совмещены в одном интерфейсе&raquo; (Microsoft, 1995,
с.&nbsp;8). Действительно, добавление множества
специальных, созданных именно для данного случая
сервисов, уменьшает простоту использования. Но как
раз это является плохой разработкой. Часто, но не
всегда, возможно увеличить функциональность, не
увеличивая степень сложности интерфейса.
Добавление нового сервиса, как правило, может быть
сделано таким образом, что это не прибавит
сложности в интерфейсе (здесь следует отметить
разницу между сложностью интерфейса и сложностью
задачи). Если добавляемая функция позволяет
объединить в единое целое разрозненные элементы
интерфейса, то такой интерфейс может стать проще.</p>

<p>
&laquo;Одним из способов сохранить простоту заключается
в сокращении объема предъявляемой информации до
того минимума, который необходим для адекватного
взаимодействия&raquo; (Microsoft, 1995, с.&nbsp;8). Это
действительно так, за исключением того, что слово
&laquo;адекватного&raquo; следует заменить словом
&laquo;нормального&raquo;. Однако в этой компании ошибаются,
когда утверждают: &laquo;Например, не используйте
словесных описаний командных имен или сообщений&raquo;
(Microsoft, 1995, с.&nbsp;8). Здесь возникает вопрос:
что же можно считать минимумом для нормального
взаимодействия? В большинстве современных
интерфейсов акцент
делается<a name="p241"></a> на краткость в ущерб ясности. Почему мы
должны заниматься расшифровкой непонятного
названия &laquo;Список&raquo; в выпадающем меню в текстовом
процессоре, когда можно было бы использовать более
понятное &laquo;Создать указатель или оглавление&raquo;?
(Необходимо учесть, что выпадающее меню не
занимает места в документе, поскольку оно исчезает
сразу же, как только вы уводите от него курсор или
выбираете какую-то из опций.) Не следует путать
простой внешний вид экрана с простотой
использования интерфейса.</p>

<blockquote>

<p>
<b>Навигация против свободного пространства</b></p>

<p>
Кажется, что мы просто боимся отображать
информацию в наших интерфейсах. Известно, что чем
меньше группа вещей, тем легче найти в ней нужный
предмет. Однако из этого не следует, как это может
некоторым показаться, что чем меньше элементов на
экране, тем лучше. Если сотни элементов разбросаны
в десятках экранов, то вы больше времени потеряете
на перемещения между ними, чем на сам поиск
конкретного элемента, даже если этот элемент
находится среди моря других аналогичных. Поиск
чего-то в длинных, однообразных списках не всегда
может быть трудным.</p>

<p>
Если бы люди не могли быстро находить короткие
элементы в длинных списках, журнал &laquo;Уолл стрит
джорнал&raquo; уже давно бы разорился. Предпочли бы вы,
чтобы котировки акций печатались по 15 строк на
странице, каждая их которых оформлена наподобие
экрана из современного интерфейса, в придачу даже
со схемой поиска нужной страницы вроде:</p>

<p>
<table cellspacing=8>
 <tr>
  <th>Ценные бумаги</th>
  <th>Страница</th>
 </tr>
 <tr>
   <td>AA-AD</td>
   <td align="center">1</td>
 </tr>
 <tr>
   <td>AD-AS</td>
   <td align="center">2</td>
 </tr>
 <tr>
   <td>AT-AZ</td>
   <td align="center">3</td>
 </tr>
 <tr>
   <td>ВА-ВК</td>
   <td align="center">4</td>
 </tr>
 <tr>
   <td>и так далее</td><td></td>
 </tr>
</table></p>

<p>
Такая схема показалась бы несерьезной, неэкономной
и странной. Однако иногда мы используем больше
экранных пикселов на то, чтобы сделать аккуратные
рамки с тенями, чем на отображение полезной
информации. Если человек имеет мотив
(обусловленный личным интересом или зарплатой) для
того, чтобы искать какие-то нудные данные, длинные
списки не могут представлять для него никакой
проблемы. Визуальный дизайнер Эдвард Тафт (Edward
Tufte, 1983, с.&nbsp;105) разработал принципы
отображения информации, среди которых первыми
тремя являются следующие:</p>

<ul>

<li>данные следует показывать прежде всего
остального;</li>

<li>следует максимально увеличивать долю чернил,
используемых для отображения данных;</li>

<li>следует<a name="p242"></a> максимально уменьшать долю чернил,
которые не используются для отображения данных.</li>

</ul>

<p>
Для того чтобы приложить эти принципы к
устройствам с дисплеями, требуется всего лишь
заменить в них слово <i>чернила</i> на слово
<i>пикселы</i>. Серьезный, профессиональный
пользователь желает, чтобы экраны были до отказа
заполнены полезным содержанием. Экраны должны быть
хорошо обозначены, снабжены простыми механизмами
для осуществления поиска и получения информации,
отражающей суть данного экрана. (В конце концов,
раз уж мы сели за компьютер, мы должны извлечь из
этого максимальную пользу.)</p>

<p>
Сегодня существует множество исследований о
дизайне экранных изображений. Многие ранние, но до
сих пор не утратившие свою ценность исследования,
рассмотрены в обзоре Туллиса (Tullis, 1984).
Некоторые из результатов до сих пор могут быть
использованы (например, время поиска в списке
элементов составляет приблизительно 30 мс на
каждый элемент (с.&nbsp;126)). Основные результаты,
полученные Туллисом, относились к 24х80
алфавитно-цифровым дисплеям и позволяли дать
количественные 
оценки<a name="r53" href="#f53"><sup>53</sup></a>. 
Если эти результаты
применить к современным растровым дисплеям и
получить критерий оценки времени поиска целевого
объекта, то это позволило бы не только
оптимизировать отдельные, изолированные безоконные
экранные изображения (в соответствии с
ограничениями Туллиса), но также достичь более
глобальной оптимизации, связанной с оценкой
навигационной структуры. Как отмечает Туллис
(с.&nbsp;132), почти всегда необходимо искать
компромисс между сложностью экрана и сложностью
навигации. Этот компромисс зависит от скорости и
простоты работы навигации и от структуры данных.
Когда для выполнения внутриэкранного поиска вместо
визуального сканирования используется поисковое
устройство (как, например, функция <kbd>LEAP</kbd>), то для
оценки эффективности должны быть разработаны
другие виды критериев. Здесь имеется широкая
область для дальнейших исследований.</p>

<p>
В любом случае, если довести до логического конца
популярную философию экранного дизайна, которая
сводится к принципу, что &laquo;чем больше пустого
пространства, тем легче читать&raquo;, то мы увидим,
что тогда на каждом экране должен помещаться
только лишь один элемент данных. В этом случае
пользователь уж точно сможет визуально распознать
этот элемент с наименьшим возможным усилием.</p>

<p>
Имея опыт улучшения множества продуктов с помощью
сокращения количества экранов и увеличения доли
информации на оставшихся<a name="p243"></a> 
экранах,&nbsp;&mdash; или, другими словами, с помощью
улучшения логической структуры дизайна,
приводящего к такому сокращению,&nbsp;&mdash; я пришел к
выводу, что почти во всех коммерческих программах
мы допускаем ту ошибку, что помещаем на экраны
слишком мало информации.</p>
</blockquote>

<p>
<i>Лучший способ заставить интерфейс вашего
продукта отличаться&nbsp;&mdash; это сделать так, чтобы он
работал.</i> В книге Нормана &laquo;Невидимый
компьютер&raquo; (Norman, &laquo;The Invisible Computer&raquo;,
1998) можно найти хорошо написанное и убедительное
обоснование важности вопросов разработки
интерфейсов, которое в большой степени обращено к
тем, кто осуществляет руководство проектами.</p>

<p><a name="f52" href="#r52"><sup>52</sup></a>
Некоторые кабели, используемые для соединения
оборудования, расположенного на больших
расстояниях друг от друга (например,
фотографические стробоскопические источники
света), снабжены соединителями-гермафродитами.
Другой пример&nbsp;&mdash; это вышедшие из употребления
коаксиальные радиочастотные соединители питания
для регистра общего назначения.</p>

<p><a name="f53" href="#r53"><sup>53</sup></a>
Критерии, предложенные Туллисом, не учитывают
качества содержания, но только его внешний вид.
Можно построить такие образцы изображений, которые
по этим критериям будут иметь высокие оценки, но
будут сложны в использовании.</p>

	<div class="page">
	<p class="back"><a href="chapter6.html">&lt;=&nbsp;Previous</a></p>
	<p class="next"><a href="conclusion.html">Next&nbsp;=&gt;</a></p>
	</div>