---
title: Приложения
---

<p>
<a name="p246"></a>
<a name="sa.A"></a><h1>A. Однокнопочная мышь: история и будущее</h1></p>

<div class="slogan">
<blockquote><p>Разнообразье любят люди 
тоже.<a name="r54" href="#f54"><sup>54</sup></a></p>
<cite>
Чосер &laquo;Рассказ Сквайра&raquo;</cite></blockquote></div>

<p>
За создание однокнопочной мыши и некоторых
основных методов ее использования я получал как
критику, так и одобрения. Вопросы читателей
черновика этой книги показали, что, на их взгляд,
система, разработанная в Macintosh, работала
аналогично системе с использованием мыши, которая
была ранее создана в исследовательском центре PARC
компании Xerox. В данном приложении будут описаны
системы с использованием мыши, которые я видел в
исследовательском центре Palo Alto Research Center
(PARC) компании Xerox. Еще ранее мышь была
использована исследовательской группой под
руководством Дугласа Инглбарта (Douglas Englebart)
из Станфордского исследовательского института для
создания системы, которая во многих отношениях на
несколько десятилетий опередила свое время. Эта
система содержала в себе ценные идеи, которые до
сих пор не нашли широкого применения. Однако
программное обеспечение, созданное Инглбартом,
часто было модальным и иногда являлось
неэффективным при подсчете нажатий на клавиши.</p>

<p>
Немногие пользователи современных персональных
компьютеров помнят, через что надо было пройти,
чтобы сделать операцию &laquo;выделения&raquo;<a name="p247"></a> 
в системе, созданной в исследовательском
центре PARC, (например, в их самом популярном
текстовом редакторе BRAVO). Далее нажатия на
каждую из трех кнопок мыши системы PARC будут
обозначены буквами <kbd>L</kbd>, <kbd>М</kbd> и <kbd>R</kbd> (левая,
средняя и правая). В текстовом редакторе BRAVO
квазирежимы для кнопок мыши не использовались.</p>

<p>
Для выделения символа: указать на нужный символ,
нажать <kbd>L</kbd>.</p>

<p>
Для выделения слова: указать на нужное слово,
нажать <kbd>M</kbd>.</p>

<p>
Для выделения произвольной строки символов:
указать на первый символ строки, нажать <kbd>L</kbd>;
указать на последний символ строки, нажать
<kbd>R</kbd>.</p>

<p>
Для выделения строки слов: указать на первое
слово, нажать <kbd>M</kbd>; указать на последнее
слово, нажать <kbd>R</kbd>.</p>

<p>
Обычной ошибкой было нажатие на кнопку <kbd>L</kbd>, а
потом на кнопку <kbd>M</kbd>, что приводило только
лишь к повторному началу процесса выделения в том
месте, которое, как вам казалось, будет концом
требуемой вам выборки. Это очень раздражало,
особенно если выборка была большого размера. Тем
не менее, обратите внимание, что вам никогда не
требовалось &laquo;отменять&raquo; выборку&nbsp;&mdash; в любой
момент вы могли свободно начинать новую. Это было
действительным преимуществом в сравнении с другими
современными системами, в которых перед тем, как
сделать другую выборку, требовалось сначала нажать
на кнопку ESC или совершить другое действие для
отмены текущей выборки.</p>

<p>
В исследовательском центре PARC ранее был
разработан и другой редактор, о котором я в то
время еще не знал. Для выделения текста в нем
использовался метод click-and-drag (щелкнуть и
перетащить). Используя систему обозначений,
описанную в разделе 3.1, для выделения какого-то
текста, требовалось выполнить следующие действия:
указать на верхнюю точку текста, <kbd>L&darr;</kbd>,
указать на нижнюю точку текста, <kbd>L&uarr;</kbd>.
Однако эта идея не была распространена на другие
типы выделения.</p>

<p>
В компании Apple я показал, каким образом можно
более широко использовать одну кнопку мыши для
выделения. Для выделения любой сплошной области на
экране, независимо от того, является ли она
текстом или нет, нужно указать на один угол
области, <kbd>L&darr;</kbd>, и указать на другой край,
<kbd>L&uarr;</kbd>. Этот метод стал называться
&laquo;щелкнуть и перетащить&raquo;.</p>

<p>
Другие методы в текстовом редакторе BRAVO были
более сложными, чем те, которые использовались в
компьютере Macintosh.</p>

<p>
Для удаления текста: выделить текст и нажать
<kbd>d</kbd>. Проблема здесь заключается в том, что
вам требуется знать о том, что выделен какой-то
текст, перед тем как нажимать клавишу с буквой
<kbd>d</kbd>. В компьютере Macintosh я решил
использовать клавишу <kbd>Delete</kbd> для удаления текста
как во время набора, так и при редактировании.</p>

<p>
<a name="p248"></a>
Для вставки текста: указать на точку вставки и
нажать <kbd>L</kbd>; нажать клавишу с буквой <kbd>i</kbd>;
ввести новый текст и нажать клавишу <kbd>ESC</kbd>. Нажатие
клавиши <kbd>ESC</kbd> снимает режим вставки. В компьютере
Macintosh не использовался режим вставки, и метод,
который был применен в нем, стал
общераспространенным: для вставки текста указать и
щелкнуть мышью в точке, где необходимо сделать
вставку, т.е. <kbd>L</kbd>; ввести новый текст. В
этом случае вместо использования явного
разделителя для начала ввода текста, как в
редакторе BRAVO, вы сразу же начинаете вводить
нужный текст вставки. Вам не требуется в конце
ввода вставки нажимать клавишу <kbd>ESC</kbd> или другую
кнопку&nbsp;&mdash; начало выполнения новой задачи
автоматически заканчивает предыдущую. Замена
текста в текстовом редакторе BRAVO происходила
следующим образом: выделить текст, нажать клавишу
с буквой <kbd>r</kbd>, ввести новый текст, нажать
клавишу ESC. Для замены текста в компьютере
Macintosh: выделить текст, нажать на клавишу
Delete и ввести новый текст. Этот метод отличается
от того, который теперь используется в системах
Macintosh и Windows для замены текста и который
является проще: выделить текст, ввести новый
текст.</p>

<p>
Однако, как пользователям известно, этот последний
метод часто приводит к случайной потере текста. В
предыдущем способе требуется на одно нажатие
клавиши больше, но он никогда не вызывает потери
данных, и поэтому текстовый редактор является
более безопасным и пользователь ощущает его именно
таким. Следовательно, одно дополнительное нажатие
на клавишу здесь оказывается весьма полезным.</p>

<p>
В отличие от текстового редактора BRAVO и
некоторых других редакторов, разработанных в
исследовательском центре PARC, в компьютере
Macintosh и, в значительной степени, в более
поздних системах ввод простой буквы никогда не
действует как команда. Сейчас уже очевидно, что
так и должно быть, но в то время так не казалось.
Мой проект интерфейса, основанного на
использовании однокнопочной мыши, уточнялся и
расширялся во время обсуждений с моими коллегами,
чаще с Брайеном Хоурдом (Brian Howard) и Биллом
Аткинсом (Bill Atkinson), и, конечно, многие
изменения были сделаны на основе наблюдений,
сделанных во время пользовательских тестирований и
дальнейшего процесса разработки. Для некоторых
пользователей оказалось сложным одновременно
удерживать кнопку и двигать графическое устройство
ввода, но это отчасти зависит от его конструкции,
а также от того, используется ли мышь или другое
устройство. В проекте Macintosh эта проблема была
облегчена тем, что на мышь была установлена одна
большая кнопка, требующая небольшого усилия для
нажатия и хорошо воспринимаемая на ощупь.
(Некоторые из последних моделей сенсорных панелей,
особенно переносные, имеют плохие кнопки, и
поэтому с их помощью трудно делать перетаскивание,
что часто приводит к ошибкам.) Кроме того, общее
улучшение и сокращение ошибок, достигаемое путем
устранения режимов, часто перевешивает
ошибки,<a name="p249"></a> 
возникающие во время перетаскивания, даже
если используются не совсем оптимальные
графические устройства ввода.</p>

<p>
В то время, однако, я не понимал еще, что мышь
может работать нормально даже со множеством кнопок
<i>при условии, что они как-то обозначены</i>.
Если бы мышь Macintosh была снабжена множеством
кнопок, и если бы кнопки имели постоянные
обозначения и использовались только лишь для
обозначенной функции, такая мышь могла бы стать
более совершенным вариантом. Улучшенная мышь могла
бы иметь сверху две кнопки, обозначенные как
Select (Выделить) и Activate (Активизировать), и
сбоку кнопку, управляемую большим пальцем руки.
Эта последняя кнопка могла бы быть обозначена как
Grab (Схватить). На некоторых современных мышах
есть сверху колесо, которое в основном
используется для прокрутки. Было бы лучше, если бы
в этом месте находился небольшой трекбол. Таким
образом, с помощью мыши контролировалась бы
позиция курсора, а трекбол использовался бы,
например, для перемещения объектов или для выбора
элементов из плавающих меню.</p>

<p>
<a name="p250"></a>
<a name="sa.B"></a><h1>B. Теория работы интерфейса для SwyftCard</h1></p>

<p>
Некоторые из принципов, рассмотренных в этой
книге, впервые были опубликованы в 1984 году в
руководстве для SwiftCard. Система SwiftCard,
предназначенная для довольно успешного в то время
Apple II, была (по сегодняшним стандартам)
простой. Приложение к ее руководству имело
необычное содержание. Вместе с обычным,
традиционным изложением принципа работы
электронной начинки этого устройства предлагалось
теоретическое описание работы программного
обеспечения, а также информация о теории работы
пользовательского интерфейса. Это, пожалуй, был
первый случай, когда информация такого рода
сопровождала коммерческий продукт. В некотором
смысле то приложение можно считать началом этой
книги. Нижеследующий материал взят из второго
издания руководства (Alzofon и Raskin, 1985).</p>

<p>
Подходы, на основе которых была создана SwiftCard,
разрабатывались с целью решения целого ряда
проблем, которыми страдают почти все современные
системы. Большинство из этих проблем сами по себе
являются довольно небольшими, но в совокупности
они приводят к тому, что процесс изучения и
использования существующего программного
обеспечения чрезмерно замедляется, что вызывает
раздражение и усталость от использования
компьютеров.</p>

<p>
Например, мы всегда удивлялись, почему
пользователю приходится форматировать диски. Разве
компьютер не способен самостоятельно определить,
форматирован диск или нет, и при необходимости
выполнить форматирование? Кроме того, нам кажется,
что клавиши для управления курсором работают
слишком медленно, а если учесть то количество
дополнительных команд, которое они требуют (для
перемещения к следующему/предыдущему слову,
предложению, абзацу,
странице;<a name="p251"></a> 
для перемещения к началу или концу
строки, документа или файла), то, на наш взгляд,
они являются также и слишком сложными. ГУВ
существенного улучшения не приносит, поскольку
большая часть этих устройств заставляет
пользователя убирать руки с клавиатуры, а также
требует много экранного пространства для меню,
полос прокрутки и других механизмов, связанных с
использованием ГУВ. Необходимость работать с меню
вместо того, чтобы сразу делать то, что нам
необходимо, вызывает раздражение, а огромное число
команд, которое используется в большинстве систем,
ставит нас в затруднительное положение. Мы
ненавидим дисковые системы, которые могут
допустить потерю информации из-за обычных
человеческих ошибок. Нас удивляет, что многие
текстовые процессоры не успевают воспринимать
информацию, вводимую с клавиатуры человеком.</p>

<p>
SwiftCard демонстрирует собой, что хороший проект
позволяет решить все эти, а вместе с ними и многие
другие вопросы и проблемы, которые беспокоили нас
в течение многих лет. Эта система способна
работать на недорогом компьютере, имеющем только
один диск, и требует минимальных ресурсов памяти.
Наш продукт выполняет то, что требуется для
большинства пользователей, однако без помощи
операционной системы, без ценника с большими
цифрами, без капризов в работе.</p>

<p>
Основные принципы разработки включают много
новшеств и учитывают опыт, использованный в других
продуктах.</p>

<ol>

<li><p> Концепция курсора с функцией <kbd>LEAP</kbd>, которая
позволяет перемещаться к целевому объекту со
скоростью, в среднем в три раза превышающей
скорость работы самого лучшего
общераспространенного устройства типа мышь.</p></li>

<li><p> Сам курсор состоит из двух частей, которые
точно показывают места, где будет появляться
вводимый текст и где будет происходить удаление.
Этот же курсор сворачивается при перемещении так,
чтобы было удобно удалять.</p></li>

<li><p> Ограниченный набор основных операций позволяет
легко выполнять широкий диапазон задач.</p></li>

<li><p> Отказ от использования операционной системы
позволяет выполнять все операции непосредственно
из редактора без необходимости переходить в
различные режимы.</p></li>

<li><p> Устранение режимов в целом способствует
формированию привычек, поскольку пользователю не
приходится задумываться, в каком состоянии
находится система, чтобы определить доступные в
этом состоянии команды. Это свойство называется
безмодальностью.</p></li>

<li><p> Отказ от использования множества способов
выполнения той или иной задачи&nbsp;&mdash; опять же для
того, чтобы пользователю не приходилось
задумываться о том, какой способ выполнения задачи
выбрать. Этот принцип мы называем монотонностью.
Так же как и безмодальность,<a name="p252"></a> 
монотонность способствует формированию
привычек в использовании.</p></li>

<li><p> Акцент на формирование привычек сам по себе
является основополагающим принципом, однако
разработчики зачастую его неоправданно не
учитывают. Мы считаем важным, чтобы после
короткого периода обучения пользователь мог
использовать систему, не задумываясь о ее работе.</p></li>

<li><p> Команда <kbd>DISK</kbd> позволяет снять сложности, которые
обычно возникают при использовании дисковой
операционной системы (DOS). Используется только
одна простая команда. Она же позволяет защитить
данные от наиболее частых ошибок, приводящих к
потере информации. Возможность для создания такой
команды дает метод, при котором один диск
соответствует одному Тексту.</p></li>

<li><p> Создание зависимости скорости работы от частоты
использования (чаще используемые задачи
выполняются быстрее, реже используемые&nbsp;&mdash;
медленнее).</p></li>

<li><p> &laquo;То, что вы видите, то вы и получите&raquo; (What
you see is what you get). Другими словами,
изображение на экране будет выглядеть так же и на
бумаге. (Из-за ограничений в оборудовании Apple
этот принцип, тем не менее, был нарушен для
операции подчеркивания.)</p></li>

<li><p> Построение команд по методу
&laquo;существительное-глагол&raquo;. Сначала пользователь
определяет, с чем он собирается работать (что дает
время на проверку и при необходимости
исправление), и затем применяет некоторое действие
к выбранному объекту. В некоторых системах
используется обратная последовательность
(&laquo;глагол-существительное&raquo;) или даже смешиваются
оба метода, что еще хуже.</p></li>

<li><p> Другой общий принцип заключается в том, что в
системе трудно что-либо испортить или стереть. Это
возможно, но очень трудно. Ошибки не происходят
случайно или по невнимательности пользователя.</p></li>

<li><p> Включение средств программирования и
коммуникации в среду общего назначения, внутри
которой выходные данные помещаются в область
редактирования или поиска.</p></li>

<li><p> Необходимость учета в плане работы времени на
проведение длительных (в течение нескольких
месяцев) тестирований и наладки. Покупатели
системы не должны использоваться в качестве
субъектов тестирования.</p></li>

</ol>

<p>
Вышеизложенное является только упрощенным
наброском (описание системы насчитывает около 50
страниц), но мы надеемся, что это даст вам
некоторое представление о том, что привело нас к
идее сделать систему SwiftCard такой, какая она
есть.</p>

<p><a name="f54" href="#r54"><sup>54</sup></a>
<i>Men loven of propre kynde newefangelnesse</i>&nbsp;&mdash;
 строфа 610 из второй части стиха <i>&laquo;Рассказ
Сквайра&raquo;</i>, поэма &laquo;Кентерберийские рассказы&raquo;
(&laquo;Canterbury Tales&raquo;) Джеффри Чосера (1340-1400),
перевод О. Румера (БВЛ, серия 1 т. 30, изд-во
&laquo;Художественная Литература&raquo; М., 1973).&nbsp;&mdash;
<i>Примеч. науч. ред.</i></p>

	<div class="page">
	<p class="back"><a href="conclusion.html">&lt;=&nbsp;Previous</a></p>
	<p class="next"><a href="biblio.html">Next&nbsp;=&gt;</a></p>
	</div>